#!/usr/bin/env zsh
# -*- coding: utf-8 -*-
#? ############################# skeptycal.com ################################
NAME="pynow"
AUTHOR="Michael Treanor  <skeptycal@gmail.com>"
COPYRIGHT="Copyright (c) 2019 Michael Treanor"
LICENSE="MIT <https://opensource.org/licenses/MIT>"
GITHUB="https://www.github.com/skeptycal"
#? ############################################################################
#* setup script variables and defaults
# source $(which ssm) # standard script modules <http://www.github.com/skeptycal/ssm>
SET_DEBUG=0 # set to 1 for verbose testing
SCRIPT_SOURCE="$0"

bak() {
    # backup $1 to the bak/ directory and add extension .bak
    [ -s "${REPO_PATH}$1" ] && cp -f "${REPO_PATH}/$1" "${BACKUP_DIR}/$1.bak" &>/dev/null || echo -e "Not able to create backup for ${REPO_PATH}/${1}."
}

_generate_setup_py() {
    ## TODO work in progress ... probably better to produce this in python
    SETUP_PY="${REPO_PATH}/setup.py"
    [ -e "${SETUP_PY}" ] && return 1
    echo -e "no setup"
}
_setup_paths() {
    ### Script name
    SCRIPT_NAME="${SCRIPT_SOURCE##*/}"

    # Repo path information
    REPO_PATH= "$(cd "$(dirname "$0")" && pwd -P)"
    REPO_NAME= "${REPO_PATH##*/}"
    PACKAGE_NAME= "${REPO_PATH}/${REPO_NAME}"
    INIT_PY= "${PACKAGE_NAME}/__init__.py"
    BACKUP_DIR= "${REPO_PATH}/bak"
    TEMPLATE_DIRECTORY= "/Volumes/Data/skeptycal/Library/CloudStorage/iCloud Drive/Documents/coding/bin/utilities/python/_python_template"

    [ -s version.py ] && VERSION="$(cat version.py | grep __version__ | cut -d "'" -f 2)" || VERSION='BETA'

    USAGE= """${MAIN:-}${SCRIPT_NAME}${WHITE:-} (version ${VERSION})"""

    # set readme file (default README.md)
    [ -s README ] && README="${REPO_PATH}/README"
    [ -s README.rst ] && README="${REPO_PATH}/README.rst"
    [ -s README.md ] && README="${REPO_PATH}/README.md"
}

_git_it() {
    # initialize and setup git repo if needed
    [[ -z "${REPO_PATH}" ]] && REPO_PATH="$(cd "$(dirname "$0")" && pwd -P)"
    REPO_NAME="${REPO_PATH##*/}"

    if ! [ -d "${REPO_PATH}/.git" ]; then
        git init
        # create remote repo
        hub create
        # commit and push initial repo
        git add --all
        git commit -m 'initial commit'
        git push --set-upstream origin $(git_current_branch)
    fi
}

_pip_it() {
    # install pipenv using default Pipfile
    if ! [ -s .pre-commit-config.yaml ]; then
        pre-commit sample-config >.pre-commit-config.yaml
    fi
    pre-commit install --install-hooks
    pre-commit autoupdate
    pre-commit
    pipenv update
    git add --all
    git commit -m 'pre-commit' >/dev/null
}

_setup_files() {
    # copy all template files to current directory
    # -n option allows script to be run repeatedly as an updater
    cp -nRT "${TEMPLATE_DIRECTORY}" "${REPO_PATH}"

    # local backup directory - directory is ignored in .gitignore
    [[ -d "${BACKUP_DIR}" ]] || mkdir -pv "${BACKUP_DIR}" &>/dev/null

    _git_it
    _pip_it

    # Pypi package initial setup
    [[ -d "${PACKAGE_NAME}" ]] || mkdir -pv "${PACKAGE_NAME}" &>/dev/null
    if ! [ -f "${INIT_PY}" ]; then
        touch "${INIT_PY}"
        echo 'from __future__ import absolute_import' >"{$INIT_PY}"
        echo "name = \"${REPO_NAME}\"" >>"${INIT_PY}"
    fi

}
_setup_repo() {
    # setup and install utilities into raw template directory
    _setup_files
    echo ''
    echo -e "$USAGE"
    echo ''

    # install pre-commit, check repo, commit changes
    # allows script to be run repeatedly as an updater

}

_update_repo() {

}

check_args() {
    case "$1" in
    init | -i | --init)
        _setup_repo
        echo ''
        exit 0
        ;;

    version | -v | --version)
        echo -e "$USAGE"
        exit 0
        ;;

    usage | -u | --usage)
        echo -e "$USAGE {init|version|usage|help|test|readme}"
        exit 0
        ;;

    help | -h | --help)
        echo -e "$USAGE {init|version|usage|help|test|readme}"
        echo ''
        [ -f $MAN ] && less MAN || echo "man page not found ..."
        exit 0
        ;;

    test | -t | --test)
        _test_paths
        echo ''
        exit 0
        ;;

    readme)
        echo -e "$USAGE"
        echo ''
        [ -f "$README" ] && textutil -convert txt $README -stdout | less || echo "README not found ..."
        echo ''
        exit 0
        ;;

    build)
        [[ $(which twine) ]] || pip install twine
        python setup.py sdist bdist_wheel
        twine upload --repository-url 'https://test.pypi.org/legacy/' 'dist/*'
        twine upload 'dist/*'
        ;;

    commit | -m | --message)
        if [[ -z "$2" ]]; then
            echo -e "You must specify a commit message to perform a commit."
            echo ''
            exit 2
        else
            git add --all &>/dev/null # first add will reset some files after pre-commit
            pre-commit &>/dev/null    # catch formatting fixes
            git add --all             # again ... after formatting ...
            git commit -m "$2"
            git push
            echo ''
            git status
            echo ''
            exit 0
        fi
        ;;

    *)
        echo -e "Invalid option: $1"
        echo ''
        echo -e "$USAGE"
        echo ''
        exit 2
        ;;

    esac
    shift
    exit 0
}

_test_paths() {
    echo "${MAIN:-}SCRIPT_SOURCE: ${WHITE:-}$SCRIPT_SOURCE"
    echo "${MAIN:-}SCRIPT_NAME: ${WHITE:-}$SCRIPT_NAME"
    echo "${MAIN:-}REPO_PATH: ${WHITE:-}$REPO_PATH"
    echo "${MAIN:-}REPO_NAME: ${WHITE:-}$REPO_NAME"
    echo "${MAIN:-}PACKAGE_NAME: ${WHITE:-}$PACKAGE_NAME"

    echo "${MAIN:-}VERSION: ${WHITE:-}$VERSION"
    echo "${MAIN:-}USAGE: ${WHITE:-}$USAGE"
    echo "${MAIN:-}TEMPLATE_DIRECTORY: ${WHITE:-}$TEMPLATE_DIRECTORY"
    echo "${MAIN:-}README: ${WHITE:-}$README"
    echo "${MAIN:-}BACKUP_DIR: ${WHITE:-}$BACKUP_DIR"
}
main_loop() {
    #* #########################################################################
    _setup_paths
    # echo "\n*****************************************************************"
    # echo -e "${USAGE}\n"
    # echo -e "The active repo is: $REPO_PATH/\n"
    # echo ''
    if [ $SET_DEBUG -gt 0 ]; then
        _test_paths
    fi

    if [[ -n "$1" ]]; then
        check_args "$@"
    else
        _setup_repo
        echo -e "$USAGE {init|version|usage|help|test|readme}"
    fi
    #     exit 0
}

main_loop "$@"

#* #############################################################################
